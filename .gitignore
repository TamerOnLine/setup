تجاوز إلى المحتوى
سجل الدردشة

أنت قلت:
صورة تم تحميلها
كيف استطيع تغير اسم المجلد على الجهاز المحلي اثناء التنزيل
قال ChatGPT:
لتغيير اسم المجلد عند استنساخ مستودع Git من GitHub، ببساطة أضف الاسم الجديد الذي تريده بعد رابط المستودع في أمر git clone.

في حالتك، الأمر التالي:

git clone https://github.com/TamerOnLine/setup.git my-setup
سيقوم بتنزيل المستودع إلى مجلد باسم my-setup بدلًا من الاسم الافتراضي setup.

الصيغة العامة:
git clone <repository-url> <desired-folder-name>
هل ترغب أن أساعدك أيضًا على تنفيذ شيء معين بعد التنزيل؟

أنت قلت:
هل استطيع الغاء ربط المستودع باللملف المحلي اثناء الاستنساخ
قال ChatGPT:
نعم، يمكنك إلغاء ربط المستودع البعيد (remote) من المجلد المحلي بعد الاستنساخ مباشرة باستخدام الأمر التالي:

🔧 الخطوات بعد الاستنساخ:
استنساخ المستودع (باسم مجلد مخصص مثلاً):

git clone https://github.com/TamerOnLine/setup.git my-setup
الدخول إلى المجلد:

cd my-setup
إزالة الربط بالمستودع البعيد:

git remote remove origin
✅ النتيجة:
الآن المجلد my-setup سيكون مجلد Git عادي بدون أي ارتباط بمستودع GitHub. يمكنك استخدامه كمشروع محلي مستقل، أو ربطه بمستودع جديد لاحقًا باستخدام:

git remote add origin <new-url>
ملاحظة:
لا يمكن تنفيذ خطوة إلغاء الربط أثناء الاستنساخ مباشرة، لكن يمكن تنفيذها فورًا بعد الانتهاء.

هل تريد سكربت PowerShell أو Bash يقوم بالخطوات تلقائيًا؟

أنت قلت:
صورة تم تحميلها
لماذا العلامة الصفراء في نافذة terminal
قال ChatGPT:
العلامة الصفراء ⚠️ في نافذة الـ Terminal داخل VS Code (تحديدًا في الزاوية اليمنى بجانب كلمة powershell) تعني أن هناك تحذيرًا متعلقًا ببيئة التيرمنال، وغالبًا لا يمنعك من العمل. الأسباب المحتملة تشمل:

✅ أسباب شائعة لظهور العلامة الصفراء:
تحذير من إصدار PowerShell قديم أو غير مدعوم:
يظهر غالبًا مع PowerShell المدمج في Windows (مثل 5.1) عند وجود إصدار أحدث متاح (مثل 7.x).

الإعدادات التلقائية للتيرمنال بها مشكلة أو تعارض:
أحيانًا ملف الإعدادات (settings.json) يطلب تيرمنال غير موجود أو shell غير صحيح.

لم يتم إعداد PowerShell كـ shell افتراضي بشكل صحيح:
قد يكون VS Code يحاول تشغيل تيرمنال غير موجود أو يفتقد لبعض المسارات ($PATH أو PSModulePath).

امتداد PowerShell نفسه يحتاج تحديثًا أو فيه مشكلة:
تحقق من تبويب Extensions في VS Code إذا كان يظهر لك تحذيرًا أو إشعارًا.

🧪 كيف تتحقق من السبب بالضبط؟
اضغط على العلامة الصفراء مباشرة أو افتح لوحة المشاكل:

من القائمة العلوية:

View → Problems
أو استخدم الاختصار:

Ctrl + Shift + M
سترى وصف التحذير بشكل مفصل.

💡 الحلول المقترحة حسب السبب:
السبب	الحل
إصدار PowerShell قديم	ثبّت PowerShell 7 وغيّره من داخل الإعدادات (Terminal › Integrated › Default Profile)
مشكلة إعدادات التيرمنال	افتح الإعدادات (Ctrl + ,) وابحث عن terminal.integrated.shell أو profiles وتأكد أن المسار صحيح
مشكلة في الامتداد	جرّب إعادة تحميل أو تحديث PowerShell Extension
مشكلة مؤقتة	أعد تشغيل VS Code أو افتح نافذة تيرمنال جديدة
إذا أردت أرسل لي محتوى التبويب "Problems" أو أي رسالة عند الضغط على العلامة، وسأوضح لك الحل المناسب تمامًا.

أنت قلت:
صورة تم تحميلها
قال ChatGPT:
الصورة التي أرسلتها توضح قائمة خيارات التيرمنال، لكن لا تظهر تفاصيل التحذير المرتبط بالعلامة الصفراء ⚠️.

لرؤية سبب التحذير بدقة:
يرجى تنفيذ أحد الخطوتين:

✅ الطريقة 1: عرض سجل التيرمنال (Terminal Output)
افتح التبويب الجانبي:
View → Output

ثم من القائمة المنسدلة في أعلى نافذة Output، اختر:

Log (Window)
أو
Log (Extension Host)
أو
Git
أو
PowerShell Extension Logs
راقب إذا ظهرت رسالة خطأ أو تحذير باللون الأصفر أو الأحمر.

✅ الطريقة 2: لوحة المشاكل (Problems)
اضغط على:

Ctrl + Shift + M

أو من القائمة: View → Problems

ستظهر قائمة بالأخطاء والتحذيرات في المشروع، بما فيها مشاكل التيرمنال أو الامتدادات.

🔧 إذا كنت تريد حلاً سريعًا:
جرّب أحد هذه الحلول العامة:

# 1. تحديث PowerShell
winget upgrade --id Microsoft.PowerShell

# 2. جعل PowerShell 7 الافتراضي (بعد تثبيته):
# افتح إعدادات VS Code > "terminal.integrated.defaultProfile.windows" واختر PowerShell 7

# 3. إعادة تعيين إعدادات التيرمنال:
# من Settings (Ctrl + ,) > ابحث "Terminal" > اضغط على "Reset to Default"
إذا أرسلت لي رسالة التحذير من نافذة "Problems" أو "Output"، أستطيع تحديد السبب بدقة وحلّه فورًا لك.

أنت قلت:
صورة تم تحميلها
قال ChatGPT:
الصورة التي أرسلتها تظهر قائمة الاختصارات المرتبطة بالتيرمنال، ولكنها لا توضح سبب التحذير الأصفر بجانب powershell ⚠️.

لذلك، لكي نعرف لماذا ظهرت علامة التحذير الصفراء بالتحديد، نحتاج إلى عرض الرسالة الفعلية من سجل Visual Studio Code.

✅ الخطوة الحاسمة الآن: عرض الرسالة التحذيرية
يرجى اتباع الخطوة التالية:

افتح لوحة المشاكل (Problems):
من الشريط العلوي:
View → Problems

أو باستخدام الاختصار:
Ctrl + Shift + M

أو افتح Output Panel:
من الشريط العلوي:

View → Output
ومن القائمة المنسدلة في الزاوية العليا اليمنى داخل نافذة الإخراج، اختر:

PowerShell Extension Logs

أو Log (Window) أو Log (Extension Host)

🔍 بعد أن ترى رسالة الخطأ أو التحذير:
انسخها وأرسلها لي هنا، وسأعطيك الحل المناسب بدقة.

هل ترغب أن أرسل لك أمرًا يختبر بيئة PowerShell مباشرة في التيرمنال لتحديد الإصدار وحالة التكوين؟

أنت قلت:
صورة تم تحميلها
قال ChatGPT:
شكرًا، الآن أصبحت الصورة واضحة ✅

⚠️ سبب ظهور علامة التحذير الصفراء:
التحذير يقول:

"The following extensions want to relaunch the terminal to contribute to its environment:"

Python

GitHub Copilot Chat

📌 التفسير:
بعض الإضافات (Extensions) مثل Python وCopilot تحتاج إلى إعادة تشغيل التيرمنال لكي تضيف متغيرات بيئة أو أدوات خاصة (مثل copilot-debug أو python venv detection).

✅ الحل السريع:
اضغط على الزر الأزرق:

🔁 Relaunch Terminal
أو نفّذ يدويًا:

# Kill and reopen terminal
Ctrl + Shift + `
بعد ذلك، ستختفي العلامة الصفراء ⚠️.

✅ ملاحظة إضافية:
هذه ليست مشكلة حقيقية أو خطأ في النظام، بل مجرد تحذير مؤقت لإعلامك أن بعض الإضافات لم تفعّل ميزاتها بالكامل حتى يتم إعادة تشغيل التيرمنال.

هل تريد أيضًا تعطيل هذه التنبيهات مستقبلاً؟

أنت قلت:
صورة تم تحميلها
لماذا عندما اكتب بداية اي كلمة لا يتم التكملة التلقائية
قال ChatGPT:
ممتاز، سؤالك واضح الآن:
لماذا لا تعمل الإكمالات التلقائية (auto-completion) في الطرفية (terminal) داخل VS Code عند كتابة أوامر مثل cd أو python؟

🔍 السبب:
الطرفية (Terminal) في VS Code — مثل PowerShell — لا توفر إكمالًا تلقائيًا ذكيًا كما في المحرر (Editor) إلا إذا كانت الأدوات التالية مثبتة ومفعلة بشكل صحيح:

✅ الحلول المقترحة لتفعيل الإكمال التلقائي في PowerShell:
1. تثبيت PSReadLine (الإضافة المسؤولة عن الإكمال)
افتح PowerShell واكتب:

Install-Module -Name PSReadLine -Force -SkipPublisherCheck
ثم أعد تشغيل التيرمنال أو VS Code.

2. تحديث PowerShell إلى الإصدار 7 أو أعلى
الإكمال الذكي أفضل بكثير في PowerShell 7+.
للتثبيت:

winget install --id Microsoft.PowerShell
ثم في VS Code:

Ctrl + , لفتح الإعدادات

ابحث عن: terminal.integrated.defaultProfile.windows

اختر: PowerShell 7 بدلاً من Windows PowerShell

3. تفعيل Shell Integration في VS Code (اختياري لكن مهم)
إذا ظهرت لك رسالة تطلب "Relaunch terminal for full shell integration" اضغط عليها.
أو أعد تشغيل التيرمنال يدويًا:

Ctrl + Shift + `
4. تأكد أن Auto Suggest مفعّل في PSReadLine
ادخل هذا الأمر في التيرمنال:

Set-PSReadLineOption -PredictionSource HistoryAndPlugin
📌 ملاحظة مهمة:
ميزة الإكمال التلقائي (Autocomplete) في المحرر (Editor) مختلفة عن الطرفية (Terminal).
إذا كنت تقصد الإكمال في ملفات *.py مثلًا، فأنت تحتاج إلى:

Python extension لـ VS Code

تفعيل IntelliSense من الإعدادات

هل تريد تفعيل الإكمال في PowerShell أم في كود Python نفسه داخل VS Code؟

أنت قلت:
Windows PowerShell
Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
                                                                                                                        Installieren Sie die neueste PowerShell für neue Funktionen und Verbesserungen! https://aka.ms/PSWindows                                                                                                                                        PS C:\WINDOWS\system32> Install-Module -Name PSReadLine -Force -SkipPublisherCheck                                                                                                                                                              Der NuGet-Anbieter ist erforderlich, um den Vorgang fortzusetzen.
PowerShellGet erfordert die NuGet-Anbieterversion 2.8.5.201 oder höher für die Interaktion mit NuGet-basierten
Repositorys. Der NuGet-Anbieter muss in "C:\Program Files\PackageManagement\ProviderAssemblies" oder
"C:\Users\tamer\AppData\Local\PackageManagement\ProviderAssemblies" verfügbar sein. Sie können den NuGet-Anbieter auch
durch Ausführen von 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force' installieren. Möchten Sie
den NuGet-Anbieter jetzt durch PowerShellGet installieren und importieren lassen?
[J] Ja  [N] Nein  [H] Anhalten  [?] Hilfe (Standard ist "J"):
قال ChatGPT:
الرسالة تقول إن PowerShell يحتاج إلى مزوّد الحزم NuGet لكي يُكمل تثبيت PSReadLine.

✅ ولحسن الحظ، هو يعرض عليك تثبيته تلقائيًا.

✔️ ما عليك فعله الآن:
عندما يُطلب منك:

Möchten Sie den NuGet-Anbieter jetzt durch PowerShellGet installieren und importieren lassen?
[J] Ja [N] Nein [H] Anhalten [?] Hilfe (Standard ist "J"):

اضغط ببساطة على:

J
ثم اضغط Enter

✳️ البديل اليدوي (إن أردت):
إذا لم تنجح الطريقة التلقائية، نفذ هذا الأمر يدويًا:

Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
ثم أعد أمر التثبيت:

Install-Module -Name PSReadLine -Force -SkipPublisherCheck
بعد الانتهاء، أعد تشغيل التيرمنال في VS Code (أو افتح PowerShell جديد)، وستعمل الإكمالات التلقائية.

هل ترغب أن أرسل لك ملف إعدادات PowerShell جاهز لتفعيل الإكمال الذكي بشكل دائم؟

أنت قلت:
Windows PowerShell
Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
                                                                                                                        Installieren Sie die neueste PowerShell für neue Funktionen und Verbesserungen! https://aka.ms/PSWindows                                                                                                                                        PS C:\WINDOWS\system32> Install-Module -Name PSReadLine -Force -SkipPublisherCheck                                                                                                                                                              Der NuGet-Anbieter ist erforderlich, um den Vorgang fortzusetzen.
PowerShellGet erfordert die NuGet-Anbieterversion 2.8.5.201 oder höher für die Interaktion mit NuGet-basierten
Repositorys. Der NuGet-Anbieter muss in "C:\Program Files\PackageManagement\ProviderAssemblies" oder
"C:\Users\tamer\AppData\Local\PackageManagement\ProviderAssemblies" verfügbar sein. Sie können den NuGet-Anbieter auch
durch Ausführen von 'Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force' installieren. Möchten Sie
den NuGet-Anbieter jetzt durch PowerShellGet installieren und importieren lassen?
[J] Ja  [N] Nein  [H] Anhalten  [?] Hilfe (Standard ist "J"):
PS C:\WINDOWS\system32>
قال ChatGPT:
ممتاز، الآن الرسالة ظهرت مجددًا ولكنك لم تضغط على أي خيار بعد.

✔️ الخطوة المطلوبة الآن:
في الطرفية اكتب الحرف:

J
ثم اضغط:

Enter
هذا يعني "نعم" (Ja) للموافقة على تثبيت مزود NuGet الضروري لمتابعة تثبيت PSReadLine.

📌 إذا لم تنجح الطريقة التلقائية، نفّذ يدويًا:
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
ثم نفّذ:

Install-Module -Name PSReadLine -Force -SkipPublisherCheck
بعد نجاح التثبيت، أعد تشغيل PowerShell أو افتح تيرمنال جديد في VS Code، وجرب الإكمال التلقائي بكتابة مثلاً:

cd D
واضغط Tab — يجب أن يكمل المسار تلقائيًا.

هل ترغب أن أجهز لك ملف Microsoft.PowerShell_profile.ps1 لتفعيل بعض الميزات الذكية تلقائيًا؟

أنت قلت:
PS N:\n\sys> git remote remove origin
error: No such remote: 'origin'
PS N:\n\sys> 
قال ChatGPT:
الرسالة:

error: No such remote: 'origin'
تعني أن المستودع الموجود في N:\n\sys لا يحتوي على remote باسم origin، وبالتالي لا يمكن حذفه لأنه غير موجود أصلاً.

✅ للتحقق مما هو موجود:
استخدم الأمر التالي:

git remote -v
سيعرض لك قائمة بكل remotes المرتبطة بالمستودع، مثل:

origin  https://github.com/username/repo.git (fetch)
origin  https://github.com/username/repo.git (push)
🧼 إذا لم يظهر شيء:
فهذا يعني أن المستودع غير مرتبط بأي مصدر بعيد (remote) — وهو الوضع الطبيعي بعد استنساخ وإزالة الربط كما فعلت سابقًا.

🛠 إذا أردت ربطه من جديد:
git remote add origin https://github.com/USERNAME/REPO.git
هل ترغب أن يكون هذا المستودع فقط محلي بدون أي remote، أم تريد ربطه بمستودع جديد على GitHub؟

أنت قلت:
PS N:\n\sys> git remote -v
PS N:\n\sys> 
قال ChatGPT:
رائع، بما أنك نفذت:

git remote -v
ولم يظهر أي شيء، فهذا يعني:

✅ المستودع لا يحتوي على أي remote حالياً.
أي أنه:

غير مرتبط بمستودع GitHub أو أي مصدر بعيد.

أصبح مستودع محلي مستقل فقط.

🔧 ماذا يمكنك أن تفعل الآن؟
1. ✅ العمل عليه كمجلد Git محلي فقط
لا حاجة لفعل شيء. يمكنك:

تنفيذ git add, git commit, git log محلياً

وستعمل كل أوامر Git العادية دون إنترنت.

2. 🔗 ربطه بمستودع جديد لاحقاً
إذا قررت رفع المشروع إلى GitHub، نفذ:

git remote add origin https://github.com/USERNAME/REPO.git
git push -u origin main
📦 مثال عملي:
git remote add origin https://github.com/TamerOnLine/sys.git
git push -u origin main
هل تريد سكربت أوامر PowerShell تلقائي لإنشاء مستودع جديد وربطه ورفعه دفعة واحدة؟

أنت قلت:
ترتيب احترافي لهذا # Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.code-workspace
*.exe
gitingest.txt
*info/
publish.py
publish_test.py
venv_switcher.py
summary_tree.txt
Dev_requirements.txt


# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv*/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the enitre vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. .cursorignore specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore
قال ChatGPT:
إليك ترتيب احترافي لملف .gitignore الخاص بمشاريع Python، مع تقسيم واضح إلى أقسام منظمة حسب الوظيفة، ودمج أسطر المستخدم المخصصة في أماكنها المنطقية:

# =========================
# 🧠 Python: Bytecode, Caches, Compiled Files
# =========================
__pycache__/
*.py[cod]
*$py.class
*.so
*.sage.py
*.manifest
*.spec
cython_debug/

# =========================
# ⚙️ Virtual Environments
# =========================
.env
.venv
env/
venv/
venv*/
ENV/
env.bak/
venv.bak/
.pdm-python
.pdm-build/
__pypackages__/

# =========================
# 📦 Package/Build Artifacts
# =========================
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# =========================
# 📄 Installer Logs
# =========================
pip-log.txt
pip-delete-this-directory.txt

# =========================
# 🧪 Testing / Coverage
# =========================
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# =========================
# 🌍 Translations
# =========================
*.mo
*.pot

# =========================
# 🌐 Django / Flask / Scrapy
# =========================
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy

# =========================
# 📚 Documentation
# =========================
docs/_build/
.site
.pybuilder/
target/
.mypy_cache/
.dmypy.json
dmypy.json
.pytype/
.pyre/
.ruff_cache/

# =========================
# 🧪 IDE / Editor Configs
# =========================
.vscode/
.idea/
.spyderproject
.spyproject
.ropeproject

# =========================
# 📓 Jupyter / IPython
# =========================
.ipynb_checkpoints
profile_default/
ipython_config.py

# =========================
# 🔧 pyenv / Poetry / Pipenv / PDM / UV
# =========================
.python-version
# Pipfile.lock
# poetry.lock
# pdm.lock
.pdm.toml
# uv.lock

# =========================
# 🧵 Celery
# =========================
celerybeat-schedule
celerybeat.pid

# =========================
# 🧠 AI Editors / Tools
# =========================
.abstra/
.cursorignore
.cursorindexingignore

# =========================
# 🔐 Private / Config Files
# =========================
.pypirc
*.code-workspace

# =========================
# 🧾 Files customized by the user
# =========================
gitingest.txt
*info/
publish.py
publish_test.py
venv_switcher.py
summary_tree.txt
Dev_requirements.txt
